; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Obj\systemclock.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\Obj\systemclock.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I..\ExternalDrive\Lcd -I..\ExternalDrive\Fat_spi -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\systemclock.crf ..\BaseDrive\SystemClock.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  RCC_Configuration PROC
;;;23     *******************************************************************************************/
;;;24     void RCC_Configuration(void) 
000000  b510              PUSH     {r4,lr}
;;;25     {
;;;26     	/* RCC system reset(for debug purpose) */
;;;27       	RCC_DeInit();
000002  f7fffffe          BL       RCC_DeInit
;;;28     
;;;29       	/* Enable HSE */
;;;30       	RCC_HSEConfig(RCC_HSE_ON);
000006  f44f3080          MOV      r0,#0x10000
00000a  f7fffffe          BL       RCC_HSEConfig
;;;31     
;;;32       	/* Wait till HSE is ready */
;;;33       	while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
00000e  bf00              NOP      
                  |L1.16|
000010  2031              MOVS     r0,#0x31
000012  f7fffffe          BL       RCC_GetFlagStatus
000016  2800              CMP      r0,#0
000018  d0fa              BEQ      |L1.16|
;;;34     
;;;35         /* Enable Prefetch Buffer */
;;;36         FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
00001a  2010              MOVS     r0,#0x10
00001c  f7fffffe          BL       FLASH_PrefetchBufferCmd
;;;37     
;;;38         /* Flash 2 wait state */
;;;39         FLASH_SetLatency(FLASH_Latency_2);
000020  2002              MOVS     r0,#2
000022  f7fffffe          BL       FLASH_SetLatency
;;;40      
;;;41         /* HCLK = SYSCLK */
;;;42         RCC_HCLKConfig(RCC_SYSCLK_Div1);
000026  2000              MOVS     r0,#0
000028  f7fffffe          BL       RCC_HCLKConfig
;;;43       
;;;44         /* PCLK2 = HCLK */
;;;45         RCC_PCLK2Config(RCC_HCLK_Div1);
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       RCC_PCLK2Config
;;;46     
;;;47         /* PCLK1 = HCLK/2 */
;;;48         RCC_PCLK1Config(RCC_HCLK_Div2);
000032  f44f6080          MOV      r0,#0x400
000036  f7fffffe          BL       RCC_PCLK1Config
;;;49     
;;;50         /* PLLCLK = 8MHz * 9 = 72 MHz */
;;;51         RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
00003a  f44f11e0          MOV      r1,#0x1c0000
00003e  f44f3080          MOV      r0,#0x10000
000042  f7fffffe          BL       RCC_PLLConfig
;;;52     
;;;53         /* Enable PLL */ 
;;;54         RCC_PLLCmd(ENABLE);
000046  2001              MOVS     r0,#1
000048  f7fffffe          BL       RCC_PLLCmd
;;;55     
;;;56         /* Wait till PLL is ready */
;;;57         while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
00004c  bf00              NOP      
                  |L1.78|
00004e  2039              MOVS     r0,#0x39
000050  f7fffffe          BL       RCC_GetFlagStatus
000054  2800              CMP      r0,#0
000056  d0fa              BEQ      |L1.78|
;;;58     
;;;59         /* Select PLL as system clock source */
;;;60         RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
000058  2002              MOVS     r0,#2
00005a  f7fffffe          BL       RCC_SYSCLKConfig
;;;61     
;;;62         /* Wait till PLL is used as system clock source */
;;;63         while(RCC_GetSYSCLKSource() != 0x08);
00005e  bf00              NOP      
                  |L1.96|
000060  f7fffffe          BL       RCC_GetSYSCLKSource
000064  2808              CMP      r0,#8
000066  d1fb              BNE      |L1.96|
;;;64     }
000068  bd10              POP      {r4,pc}
;;;65     
                          ENDP

